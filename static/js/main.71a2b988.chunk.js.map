{"version":3,"sources":["Components/Avatar/index.tsx","Components/ContentCard/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Avatar","props","size","address","onClick","avatar","rows","cells","src","style","display","overflow","cursor","alignItems","width","height","alt","borderRadius","Meta","Card","ContentCard","marginBottom","cover","this","data","actions","type","key","title","description","React","Component","SubMenu","Menu","Header","Layout","Content","Footer","Sider","App","parseKey","match","chunk","hash","state","images","getData","a","fetch","response","out","ok","json","forEach","value","content","alert","status","setState","Object","entries","map","className","theme","mode","defaultSelectedKeys","lineHeight","Item","padding","margin","background","minHeight","img","i","values","v","join","textAlign","href","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.71a2b988.chunk.js","sourcesContent":["import * as React from 'react';\nimport * as avatar from 'identity-img';\n\n\nconst SIZE = 28;\n\ninterface IProps {\n    size?: number,\n    address: string,\n    onClick?: () => void\n}\n\nconst Avatar = (props: IProps) => {\n    const {\n        size = SIZE,\n        address,\n        onClick\n    } = props;\n\n    avatar.config({\n        rows: 8,\n        cells: 8\n    });\n\n    const src = address\n        ? avatar.create(address, { size: size * 3 })\n        : '';\n\n    return (\n        <div\n            style={{\n                display: 'flex',\n                overflow: 'hidden',\n                cursor: 'pointer',\n                alignItems: 'center'\n            }}\n            onClick={onClick}\n        >\n            <img\n                src={src}\n                width={size}\n                height={size}\n                alt=\"Avatar\"\n                style={{borderRadius: '50%'}}\n            />\n        </div>\n    );\n};\n\nexport default Avatar;\n","import React from \"react\";\nimport { Card, Icon } from 'antd';\nimport Avatar from \"../Avatar\";\nconst { Meta } = Card;\n\ninterface IProps {\n    data: string\n    address: string\n}\n\nexport default class ContentCard extends React.Component<IProps>{\nrender() {\n    return  <Card\n        style={{ width: '40vw', marginBottom: '64px' }}\n        cover={\n            <img\n                alt=\"example\"\n                src={this.props.data}\n            />\n        }\n        actions={[\n            <Icon type=\"heart\" key=\"setting\" />,\n            <Icon type=\"share-alt\" key=\"edit\" />,\n            <Icon type=\"ellipsis\" key=\"ellipsis\" />,\n        ]}\n    >\n        <Meta\n            avatar={<Avatar size={48} address={this.props.address} />}\n            title={this.props.address}\n            description=\"This is the description\"\n        />\n    </Card>;\n}\n}\n","import React from 'react';\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport { Icon, Layout, Menu } from 'antd';\nimport ContentCard from \"./Components/ContentCard\";\n\nconst {SubMenu} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\ntype TStateItem = {\n    key: string\n    value: string\n}\n\ntype TParsedKey = {\n    chunk: string | null\n    hash: string | null\n}\n\ntype TImage = { hash: string, content: { [key: string]: string } }\n\ninterface IState {\n    images: TImage[]\n}\n\ninterface IProps {\n\n}\n\nexport default class App extends React.Component<IProps, IState> {\n    componentDidMount(): void {\n        this.getData()\n    }\n\n    parseKey = (key: string): TParsedKey => {\n        const match = key.match(/chunk_(\\d+)_from_(.*)$/);\n        return {\n            chunk: match ? match[1] : null,\n            hash: match ? match[2] : null\n        }\n    };\n\n    state: IState = {\n        images: []\n    }\n\n    getData = async () => {\n        let response = await fetch('https://testnode1.wavesnodes.com/addresses/data/3NCoM7mcr2Y574DNHP74owQXMGKkX3CLB9y');\n        const out: { [keyHash: string]: TImage } = {};\n        if (response.ok) {\n            let json = await response.json();\n            json.forEach(({key, value}: TStateItem) => {\n                const {chunk, hash} = this.parseKey(key);\n                if (chunk == null || hash == null) return;\n                out[hash] = out[hash] ? out[hash] : ({hash, content: {}});\n                const content = out[hash].content || {};\n                content[chunk] = value;\n                out[hash] = {hash, content}\n            })\n        } else {\n            alert(\"Ошибка HTTP: \" + response.status);\n        }\n\n        this.setState({images: Object.entries(out).map(([_, value]) => value)})\n    };\n\n    render() {\n        return <div className=\"root\">\n            <Layout>\n                <Header className=\"header\">\n                    <div className=\"logo\"/>\n                    <Menu\n                        theme=\"dark\"\n                        mode=\"horizontal\"\n                        defaultSelectedKeys={['2']}\n                        style={{lineHeight: '64px'}}\n                    >\n                        <Menu.Item key=\"1\">List of posts</Menu.Item>\n                        <Menu.Item key=\"2\">Create a new post</Menu.Item>\n                        <Menu.Item key=\"3\">Action history</Menu.Item>\n                    </Menu>\n                </Header>\n                <Content style={{padding: '0 50px', margin: '48px 0 0 0'}}>\n                    <Layout style={{padding: '24px 0', background: '#fff'}}>\n                        <Sider width={200} style={{background: '#fff'}}>\n                            <Menu\n                                mode=\"inline\"\n                                defaultSelectedKeys={['1']}\n                                style={{height: '100%'}}\n                            >\n                                <SubMenu\n                                    key=\"sub1\"\n                                    title={\n                                        <span>\n                  <Icon type=\"user\"/>\n                  My accounts\n                </span>\n                                    }\n                                >\n                                    <Menu.Item key=\"1\">acc1</Menu.Item>\n                                    <Menu.Item key=\"2\">acc2</Menu.Item>\n                                    <Menu.Item key=\"3\">acc3</Menu.Item>\n                                    <Menu.Item key=\"4\">acc4</Menu.Item>\n                                </SubMenu>\n                                <SubMenu\n                                    key=\"sub2\"\n                                    title={\n                                        <span>\n                  <Icon type=\"laptop\"/>\n                  My posts\n                </span>\n                                    }\n                                >\n                                    <Menu.Item key=\"5\">option5</Menu.Item>\n                                    <Menu.Item key=\"6\">option6</Menu.Item>\n                                    <Menu.Item key=\"7\">option7</Menu.Item>\n                                    <Menu.Item key=\"8\">option8</Menu.Item>\n                                </SubMenu>\n                                <SubMenu\n                                    key=\"sub3\"\n                                    title={\n                                        <span>\n                  <Icon type=\"notification\"/>\n                  My likes\n                </span>\n                                    }\n                                >\n                                    <Menu.Item key=\"9\">option9</Menu.Item>\n                                    <Menu.Item key=\"10\">option10</Menu.Item>\n                                    <Menu.Item key=\"11\">option11</Menu.Item>\n                                    <Menu.Item key=\"12\">option12</Menu.Item>\n                                </SubMenu>\n                            </Menu>\n                        </Sider>\n                        <Content style={{padding: '0 24px', minHeight: 280}}>\n                            {this.state.images.map((img, i) => <ContentCard\n                                data={Object.values(img.content).map(v => v).join('')}\n                                address={img.hash}\n                                key={i}\n                            />)}\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{textAlign: 'center'}}>Waves faculty ©2019 Created by <a\n                    href=\"https://github.com/chlenc\">chlenc</a></Footer>\n            </Layout>\n        </div>;\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}